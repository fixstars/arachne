stages:
  - build-image
  - build
  - test
  - benchmark
  - publish-pip-pkg
  - release-image
  - cleanup

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TEST_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  DOCKER_VAI_TEST_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:${CI_PIPELINE_ID}
  ARACHNE_PYTHONPATH: ${CI_PROJECT_DIR}/python
  TVM_PYTHONPATH: ${CI_PROJECT_DIR}/3rdparty/tvm/python
  TVM_LIBRARY_PATH: ${CI_PROJECT_DIR}/build_tvm
  CUDA_VISIBLE_DEVICES: 7
  ARACHNE_CI_RPC_TRACKER: dgx-s.fixstars.com:8889


#
# 1. Build Image
#
build-image-base:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_TEST_IMAGE} -f docker/Dockerfile --build-arg CACHEBUST=$(date +%s.%N) docker
    - docker push ${DOCKER_TEST_IMAGE}

build-image-rpc-tracker:
  stage: build-image
  image: docker:19.03.14-git
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - ci/build_rpc_tracker.sh

build-image-vai:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_VAI_TEST_IMAGE} -f docker/Dockerfile.vitis_ai --build-arg CACHEBUST=$(date +%s.%N) .
    - docker push ${DOCKER_VAI_TEST_IMAGE}

#
# 2. Build TVM
#
build-tvm:
  stage: build
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  script:
    - ./docker/install/install_tvm.sh
    - python3 -c "import tvm"
  cache:
    paths:
      - build_tvm
  artifacts:
    paths:
      - build_tvm

#
# Build sdist pkg
#

build-sdist:
  stage: build
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  variables:
    USE_TAG_VERSION: "false"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'
      variables:
        USE_TAG_VERSION: "true"
    - if: $CI_COMMIT_BRANCH
  script:
    - pwd
    - >
        if [ "$USE_TAG_VERSION" == "true" ]; then
          export PKG_VERSION=`echo ${CI_COMMIT_TAG} | cut -b 2-`
          sed -i -e s/version\ =\ \"0.0.0\"/version\ =\ \"${PKG_VERSION}\"/g pyproject.toml
        fi
    - poetry build -f sdist
  artifacts:
    paths:
      - dist
      - pyproject.toml


#
# 3. Test
#
test:
  stage: test
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-tvm
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:${TVM_PYTHONPATH}:$PYTHONPATH
  script:
    - pwd
    - ci/test.sh

test-sdist-install:
  stage: test
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-sdist
  before_script:
    - ./docker/install/setup_tvm_config.sh
    - export TVM_CMAKE_CONFIG=${CI_PROJECT_DIR}/config.cmake
  script:
    - pwd
    - pip install dist/*.tar.gz

#
# Publish a pip package
#
publish-pip-pkg:
  stage: publish-pip-pkg
  image: ${DOCKER_TEST_IMAGE}
  tags:
    - docker
    - dgx1
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'
  dependencies:
    - build-sdist
  script:
    - pwd
    - poetry publish --repository arachne -u gitlab-ci-token -p ${CI_JOB_TOKEN}


#
# 4. Release Image
#
.release-image: &release-image-base
  stage: release-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker pull ${DOCKER_TEST_IMAGE}
    - docker tag ${DOCKER_TEST_IMAGE} ${DOCKER_RELEASE_IMAGE}
    - docker push ${DOCKER_RELEASE_IMAGE}
    - docker pull ${DOCKER_VAI_TEST_IMAGE}
    - docker tag ${DOCKER_VAI_TEST_IMAGE} ${DOCKER_VAI_RELEASE_IMAGE}
    - docker push ${DOCKER_VAI_RELEASE_IMAGE}

release-image-latest:
  <<: *release-image-base
  only:
    - master
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:latest
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:latest

release-image-tags:
  <<: *release-image-base
  only:
    - tags
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:${CI_COMMIT_TAG}

#
# 5. cleanup
#
cleanup-image:
  stage: cleanup
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  when: always
  script:
    - docker image rm -f ${DOCKER_TEST_IMAGE} || true
    - docker image rm -f ${DOCKER_VAI_TEST_IMAGE} || true


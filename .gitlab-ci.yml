stages:
  - build-image
  - build
  - test
  - benchmark
  - release-image
  - cleanup

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TEST_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  DOCKER_VAI_TEST_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:${CI_PIPELINE_ID}
  ARACHNE_PYTHONPATH: ${CI_PROJECT_DIR}/python
  TVM_PYTHONPATH: ${CI_PROJECT_DIR}/3rdparty/tvm/python
  TVM_LIBRARY_PATH: ${CI_PROJECT_DIR}/build_tvm
  CUDA_VISIBLE_DEVICES: 7
  ARACHNE_CI_RPC_TRACKER: dgx-s.fixstars.com:8889


#
# 1. Build Image
#
build-image-base:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_TEST_IMAGE} -f docker/Dockerfile docker
    - docker push ${DOCKER_TEST_IMAGE}

build-image-rpc-tracker:
  stage: build-image
  image: docker:19.03.14-git
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - ci/build_rpc_tracker.sh

build-image-vai:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_VAI_TEST_IMAGE} -f docker/Dockerfile.vitis_ai .
    - docker push ${DOCKER_VAI_TEST_IMAGE}
#
# 2. Build TVM
#
build-tvm:
  stage: build
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  script:
    - ./docker/install/install_tvm.sh
    - python3 -c "import tvm"
  cache:
    paths:
      - build_tvm
  artifacts:
    paths:
      - build_tvm

#
# 3.1. Test
#
.test: &test-base
  stage: test
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-tvm
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:${TVM_PYTHONPATH}:$PYTHONPATH
  script:
    - ci/evaluate.sh ${ARACHNE_CI_DEVICE} 100
#  artifacts:
#    paths:
#      - .artifacts

test-cpu:
  <<: *test-base
  except:
    - master
    - tags
  variables:
    ARACHNE_CI_DEVICE: host

test-gpu:
  <<: *test-base
  except:
    - master
    - tags
  variables:
    ARACHNE_CI_DEVICE: host-gpu

test-dpu:
  <<: *test-base
  variables:
    VAI_CONTAINER_NAME: ${DOCKER_VAI_TEST_IMAGE}
  except:
    - master
    - tags
  script:
    - ci/buildtest_dpu.sh ultra96

#
# 3.2. Evaluate
#
.evaluate: &evaluate-base
  <<: *test-base
  only:
    - master
    - tags
  script:
    - ci/evaluate.sh ${ARACHNE_CI_DEVICE}

evaluate-cpu-int8:
  <<: *evaluate-base
  variables:
    ARACHNE_CI_DEVICE: host

evaluate-gpu-fp16:
  <<: *evaluate-base
  variables:
    TVM_TENSORRT_USE_FP16: 1
    ARACHNE_CI_DEVICE: host-gpu

# Skip to shorten test
# evaluate-gpu-fp32:
#   <<: *evaluate-base
#   variables:
#     ARACHNE_CI_DEVICE: host-gpu


#
# 4. Benchmark
#
.benchmark: &benchmark-base
  stage: benchmark
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-tvm
  when: manual
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:${TVM_PYTHONPATH}:$PYTHONPATH
  script:
    - ci/benchmark.sh ${ARACHNE_CI_DEVICE}
#  artifacts:
#    paths:
#      - .artifacts

benchmark-raspi4:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: raspi4
    ARACHNE_CI_RPC_KEY: raspi4

benchmark-jetson-nano:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: jetson-nano
    ARACHNE_CI_RPC_KEY: jetson-nano

benchmark-jetson-tx2:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: jetson-tx2
    ARACHNE_CI_RPC_KEY: jetson-tx2


benchmark-jetson-xavier-nx:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: jetson-xavier-nx
    ARACHNE_CI_RPC_KEY: jetson-xavier-nx

benchmark-ultra96:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: ultra96
    ARACHNE_CI_RPC_KEY: ultra96
  script:
   - ci/benchmark_ultra96.sh ${ARACHNE_CI_DEVICE}

benchmark-kv260:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: kv260
    ARACHNE_CI_RPC_KEY: kv260

benchmark-coral:
  <<: *benchmark-base
  variables:
    ARACHNE_CI_DEVICE: coral
    ARACHNE_CI_RPC_KEY: coral
  script:
    - ci/benchmark_coral.sh ${ARACHNE_CI_DEVICE}


#
# 5. Release Image
#
.release-image: &release-image-base
  stage: release-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker pull ${DOCKER_TEST_IMAGE}
    - docker tag ${DOCKER_TEST_IMAGE} ${DOCKER_RELEASE_IMAGE}
    - docker push ${DOCKER_RELEASE_IMAGE}
    - docker pull ${DOCKER_VAI_TEST_IMAGE}
    - docker tag ${DOCKER_VAI_TEST_IMAGE} ${DOCKER_VAI_RELEASE_IMAGE}
    - docker push ${DOCKER_VAI_RELEASE_IMAGE}

release-image-latest:
  <<: *release-image-base
  only:
    - master
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:latest
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:latest

release-image-tags:
  <<: *release-image-base
  only:
    - tags
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:{CI_COMMIT_TAG}
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:{CI_COMMIT_TAG}


#
# 6. cleanup
#
cleanup-image:
  stage: cleanup
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  when: always
  script:
    - docker image rm -f ${DOCKER_TEST_IMAGE} || true
    - docker image rm -f ${DOCKER_VAI_TEST_IMAGE} || true

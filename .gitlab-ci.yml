stages:
  - check-format
  - build-image
  - build
  - test
  - benchmark
  - publish-pip-pkg
  - release-image
  - cleanup
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TEST_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  DOCKER_VAI_TEST_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:${CI_PIPELINE_ID}
  ARACHNE_PYTHONPATH: ${CI_PROJECT_DIR}/python
  TVM_PYTHONPATH: ${CI_PROJECT_DIR}/3rdparty/tvm/python
  TVM_LIBRARY_PATH: ${CI_PROJECT_DIR}/build_tvm
  CUDA_VISIBLE_DEVICES: 7
  ARACHNE_CI_RPC_TRACKER: dgx-s.fixstars.com:8889

check-format-diff:
  stage: check-format
  image: python:3.6
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  script:
    - python3 -m pip install black isort
    - isort python --diff --check
    - black python --diff --check

#
# 1. Build Image
#
build-image-base:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_TEST_IMAGE} -f docker/Dockerfile --build-arg CACHEBUST=$(date +%s.%N) docker
    - docker push ${DOCKER_TEST_IMAGE}

build-image-rpc-tracker:
  stage: build-image
  image: docker:19.03.14-git
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - ci/build_rpc_tracker.sh

build-image-l4t-rpc-server:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - wget https://github.com/docker/buildx/releases/download/v0.6.3/buildx-v0.6.3.linux-amd64
    - mkdir -p ~/.docker/cli-plugins && mv buildx-v0.6.3.linux-amd64 ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker buildx create --use
    - docker buildx build --platform linux/aarch64 --cache-to=${CI_REGISTRY_IMAGE}/l4t_tvm_rpc_server:cache --cache-from=${CI_REGISTRY_IMAGE}/l4t_tvm_rpc_server:cache -t ${CI_REGISTRY_IMAGE}/l4t_tvm_rpc_server -f docker/l4t/Dockerfile.tvm_rpc_server . --push


build-image-vai:
  stage: build-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_VAI_TEST_IMAGE} -f docker/Dockerfile.vitis_ai --build-arg CACHEBUST=$(date +%s.%N) .
    - docker push ${DOCKER_VAI_TEST_IMAGE}

#
# 2. Build TVM
#
build-tvm:
  stage: build
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  script:
    - ./docker/install/install_tvm.sh
    - python3 -c "import tvm"
  cache:
    paths:
      - build_tvm
  artifacts:
    paths:
      - build_tvm

#
# Build sdist pkg
#

build-sdist:
  stage: build
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  variables:
    USE_TAG_VERSION: "false"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'
      variables:
        USE_TAG_VERSION: "true"
    - if: $CI_COMMIT_BRANCH
  script:
    - pwd
    - >
        if [ "$USE_TAG_VERSION" == "true" ]; then
          export PKG_VERSION=`echo ${CI_COMMIT_TAG} | cut -b 2-`
          sed -i -e s/version\ =\ \"0.0.0\"/version\ =\ \"${PKG_VERSION}\"/g pyproject.toml
        fi
    - poetry build -f sdist
  artifacts:
    paths:
      - dist
      - pyproject.toml


#
# 3. Test
#
test:
  stage: test
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-tvm
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:${TVM_PYTHONPATH}:$PYTHONPATH
  script:
    - pwd
    - ci/test.sh

test-sdist-install:
  stage: test
  tags:
    - docker
    - dgx1
  image: ${DOCKER_TEST_IMAGE}
  dependencies:
    - build-sdist
  before_script:
    - ./docker/install/setup_tvm_config.sh
    - export TVM_CMAKE_CONFIG=${CI_PROJECT_DIR}/config.cmake
  script:
    - pwd
    - pip install dist/*.tar.gz

#
# Publish a pip package
#
publish-pip-pkg:
  stage: publish-pip-pkg
  image: ${DOCKER_TEST_IMAGE}
  tags:
    - docker
    - dgx1
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'
  dependencies:
    - build-sdist
  script:
    - pwd
    - poetry publish --repository arachne -u gitlab-ci-token -p ${CI_JOB_TOKEN}


#
# 4. Release Image
#
.release-image: &release-image-base
  stage: release-image
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker pull ${DOCKER_TEST_IMAGE}
    - docker tag ${DOCKER_TEST_IMAGE} ${DOCKER_RELEASE_IMAGE}
    - docker push ${DOCKER_RELEASE_IMAGE}
    - docker pull ${DOCKER_VAI_TEST_IMAGE}
    - docker tag ${DOCKER_VAI_TEST_IMAGE} ${DOCKER_VAI_RELEASE_IMAGE}
    - docker push ${DOCKER_VAI_RELEASE_IMAGE}

release-image-latest:
  <<: *release-image-base
  only:
    - master
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:latest
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:latest

release-image-tags:
  <<: *release-image-base
  only:
    - tags
  variables:
    DOCKER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    DOCKER_VAI_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/vitis_ai:${CI_COMMIT_TAG}

#
# 5. cleanup
#
cleanup-image:
  stage: cleanup
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  when: always
  script:
    - docker image rm -f ${DOCKER_TEST_IMAGE} || true
    - docker image rm -f ${DOCKER_VAI_TEST_IMAGE} || true


#
# deployment
#
.deploy-tvm-apps: &deploy-tvm-apps-base
  stage: deploy
  image: ubuntu:18.04
  tags:
    - docker
    - dgx1
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.1/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl create secret docker-registry gitlab-registry --docker-server="$CI_REGISTRY" --docker-username="$CI_DEPLOY_USER" --docker-password="$CI_DEPLOY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL" -o yaml --dry-run=client | kubectl apply -f -

deploy-tvm-rpc-tracker:
  <<: *deploy-tvm-apps-base
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - kubectl apply -f deploy/tvm_rpc_tracker.yml
  environment:
    name: development
    on_stop: stop-development

deploy-tvm-rpc-server:
  <<: *deploy-tvm-apps-base
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  parallel:
    matrix:
      - DEVICE:
        - 'jetson-nano'
        - 'jetson-xavier-nx'
        - 'jetson-tx2'
  variables:
    TVM_TENSORRT_USE_FP16: 1
    TVM_TENSORRT_MAX_WORKSPACE_SIZE: 1073741824 # 1GiB for jetson-xavier-nx and jetson-tx2
  needs: ["deploy-tvm-rpc-tracker"]
  script:
    - export NODE_NUM=`kubectl get nodes --selector=device=${DEVICE} | tail -n +2 | wc -l`
    - sed -e s/\$NODE_NUM/${NODE_NUM}/g deploy/l4t/tvm_rpc_server.yml > /tmp/deploy.yml
    - sed -i -e s/\$DEVICE/${DEVICE}/g /tmp/deploy.yml
    - sed -i -e s/\$TVM_TENSORRT_USE_FP16/${TVM_TENSORRT_USE_FP16}/g /tmp/deploy.yml
    - > # limit to 128 MiB for jetson-nano
        if [ "$DEVICE" == "jetson-nano" ]; then
          export TVM_TENSORRT_MAX_WORKSPACE_SIZE=134217728
        fi
    - sed -i -e s/\$TVM_TENSORRT_MAX_WORKSPACE_SIZE/${TVM_TENSORRT_MAX_WORKSPACE_SIZE}/g /tmp/deploy.yml
    - kubectl apply -f /tmp/deploy.yml
  environment:
    name: development
    on_stop: stop-development

stop-development:
  <<: *deploy-tvm-apps-base
  when: manual
  script:
    - kubectl delete deploy arachne-tvm-rpc-server-jetson-nano -n ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-development
    - kubectl delete deploy arachne-tvm-rpc-server-jetson-xavier-nx -n ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-development
    - kubectl delete deploy arachne-tvm-rpc-server-jetson-tx2 -n ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-development
    - kubectl delete deploy arachne-tvm-rpc-tracker -n ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-development
  environment:
    name: development
    action: stop

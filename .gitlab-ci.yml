
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_CI_BASE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}-base
  DOCKER_CI_SRC_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}-src
  ARACHNE_PYTHONPATH: ${CI_PROJECT_DIR}/python
  TVM_LIBRARY_PATH: ${CI_PROJECT_DIR}/build/tvm
  CUDA_VISIBLE_DEVICES: 7

check-format-diff:
  stage: .pre
  image: python:3.6
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  script:
    - python3 -m pip install black isort flake8
    - isort python --diff --check
    - black python --diff --check
    - flake8 --show-source --statistic


build-image-gitlab:
  stage: build
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build --target base -t ${DOCKER_CI_BASE_IMAGE} -f docker/devel-gpu.Dockerfile docker
    - docker build -t ${DOCKER_CI_SRC_IMAGE} -f docker/devel-gpu.Dockerfile docker
    - docker push ${DOCKER_CI_BASE_IMAGE}

build-image-dockerhub:
  stage: build
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  before_script:
    - docker login -u lp6m -p ${DOCKERHUB_TOKEN}
  script:
    - docker build --target base -t arachnednn/arachne:devel-gpu -f docker/devel-gpu.Dockerfile docker
    - docker build -t arachnednn/arachne:base-gpu-jp46 -f docker/base-gpu-jp4x.Dockerfile docker
    - docker build -t arachnednn/arachne:base-gpu-jp45 -f docker/base-gpu-jp4x.Dockerfile --build-arg CUDNN=8.0.0.180-1 --build-arg LIBNVINFER=7.1.3-1 --build-arg LIBNVINFER_MAJOR_VERSION=7 docker
    - docker push arachnednn/arachne:devel-gpu
    - docker push arachnednn/arachne:base-gpu-jp46
    - docker push arachnednn/arachne:base-gpu-jp45
  only:
    - main

test-arachne:
  stage: test
  image: ${DOCKER_CI_BASE_IMAGE}
  needs: ['build-image-gitlab']
  tags:
    - docker
    - dgx1
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:$PYTHONPATH
    - git clone --recursive https://github.com/fixstars/tvm 3rdparty/tvm
    - poetry install
    - poetry run ./scripts/install_tvm.sh
    - poetry run ./scripts/install_torch2trt.sh
  script:
    - poetry run pytest tests --forked

test-doc-build:
  stage: test
  image: ${DOCKER_CI_BASE_IMAGE}
  needs: ['build-image-gitlab']
  tags:
    - docker
    - dgx1
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:$PYTHONPATH
    - git clone --recursive https://github.com/fixstars/tvm 3rdparty/tvm
    - poetry install
    - poetry run ./scripts/install_tvm.sh
    - poetry run ./scripts/install_torch2trt.sh
  script:
    - poetry run sphinx-build docs docs/_build
  artifacts:
    paths:
      - docs/_build

pages:
  stage: deploy
  image: ${DOCKER_CI_BASE_IMAGE}
  needs:
    - job: test-doc-build
      artifacts: true
  tags:
    - docker
    - dgx1
  script:
    - mv docs/_build public
  artifacts:
    paths:
      - public
  only:
  - main

cleanup-image:
  stage: .post
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  when: always
  script:
    - docker image rm -f ${DOCKER_CI_BASE_IMAGE} || true
    - docker image rm -f ${DOCKER_CI_SRC_IMAGE} || true

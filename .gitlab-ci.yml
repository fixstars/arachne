
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_CI_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  ARACHNE_PYTHONPATH: ${CI_PROJECT_DIR}/python
  TVM_LIBRARY_PATH: ${CI_PROJECT_DIR}/build/tvm
  CUDA_VISIBLE_DEVICES: 7

check-format-diff:
  stage: .pre
  image: python:3.6
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
  script:
    - python3 -m pip install black isort
    - isort python --diff --check
    - black python --diff --check


build-image:
  stage: build
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - docker build -t ${DOCKER_CI_IMAGE} -f docker/devel-gpu.Dockerfile docker
    - docker push ${DOCKER_CI_IMAGE}

test-arachne:
  stage: test
  image: ${DOCKER_CI_IMAGE}
  needs: ['build-image']
  tags:
    - docker
    - dgx1
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:$PYTHONPATH
    - poetry install
    - poetry run ./scripts/build_tvm.sh
    - poetry run ./scripts/install_torch2trt.sh
  script:
    - poetry run pytest tests --forked

test-doc-build:
  stage: test
  image: ${DOCKER_CI_IMAGE}
  needs: ['build-image']
  tags:
    - docker
    - dgx1
  before_script:
    - export PYTHONPATH=${ARACHNE_PYTHONPATH}:$PYTHONPATH
    - poetry install
    - poetry run ./scripts/build_tvm.sh
    - poetry run ./scripts/install_torch2trt.sh
  script:
    - poetry run sphinx-build docs docs/_build
  artifacts:
    paths:
      - docs/_build

pages:
  stage: deploy
  image: ${DOCKER_CI_IMAGE}
  needs:
    - job: test-doc-build
      artifacts: true
  tags:
    - docker
    - dgx1
  script:
    - mv docs/_build public
  artifacts:
    paths:
      - public
  only:
  - feature/v0.2


cleanup-image:
  stage: .post
  image: docker:19.03.14
  tags:
    - docker
    - dgx1
  when: always
  script:
    - docker image rm -f ${DOCKER_CI_IMAGE} || true